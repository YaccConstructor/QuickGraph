// Eugene Auduchinok, 2016

{
open DotParserProject.GraphData
open Option
open System.Collections.Generic
open System.Linq

let map = Map.ofList
let wrongEdge = failwithf "DotParser: unexpected token: %s"

let inline getOrElse v =
    function
    | Some x -> x
    | None -> v
}

tokens {
    _ of string
}

options {
    translate = true
    module = "DotParserProject.Gen.DotParser"
    infEpsPath = epsilons
    pos = uint64
}

module DotGrammar

[<Start>]
graph: g=graph_type [ID] LBRACE g1=stmt_list<<g>> RBRACE { g1 }

graph_type: s=[STRICT] d=(GRAPH { false } | DIGRAPH { true }) { emptyGraph d (isSome s) }

stmt_list<<(g: GraphData)>>:
    g1=[s=stmt<<g>> [SEMI] s1=[stmt_list<<s>>] { getOrElse s s1 }] { getOrElse g g1 }

stmt<<(g: GraphData)>>:
    g1=node_stmt<<g>> { g1 }
  | g1=edge_stmt<<g>> { g1 }
  | g1=attr_stmt<<g>> { g1 }
  | g1=subgraph<<g>>  { fst g1 }


attr_stmt<<(g: GraphData)>>:
    k=(GRAPH { "graph" } | NODE { "node" } | EDGE { "edge" }) a=attr_list { addAttributes g k a }

attr_list: LBRACK a=[a_list] RBRACK { getOrElse Map.empty a }

a_list:
    k=ID ASSIGN v=ID [SEMI { } | COMMA { }] l=[a_list] { Map.add k v (getOrElse Map.empty l) }

node_stmt<<(g: GraphData)>>: n=ID a=[attr_list] { addNode g n (getOrElse Map.empty a) |> fst }

edge_stmt<<(g: GraphData)>>:
	n=nodes<<g>> g1=edge_rhs<<(fst n, [snd n])>> a=[attr_list] { addEdgesForList (fst g1) (snd g1) (getOrElse Map.empty a) }

edge_rhs<<(d: GraphData * string list list)>>:
    edgeop<<(fst d)>> n=nodes<<(fst d)>> r=[edge_rhs<<(fst n, (snd n) :: (snd d))>>] { if isSome r then r.Value else (fst n), ((snd n) :: (snd d)) }

nodes<<(g: GraphData)>>: n=node_id<<g>> { n } | n=subgraph<<g>> { n }

edgeop<<(g: GraphData)>>:
	EDGE { if g.IsDirected then wrongEdge "--" else () }
  | DIEDGE { if not <| g.IsDirected then wrongEdge "->" else () }

node_id<<(g: GraphData)>>: name=ID { addNode g name Map.empty }

subgraph<<(g: GraphData)>>:
    [SUBGRAPH [ID] { }] LBRACE s=stmt_list<<(copyAttrs g)>> RBRACE { addSubgraph g s }